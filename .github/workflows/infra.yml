name: Terraform

on:
  push:
    branches:
      - ec2

jobs:
  infra:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    outputs:
      pub_ip: ${{ steps.get-public-ip.outputs.pub_ip }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up terraform
      uses: hashicorp/setup-terraform@v2
      with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Setup Terraform Backend
      id: backend
      run: |
        cat > backend.tf << EOF
        terraform {
            cloud {
                organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
                workspaces {
                name = "${{ secrets.TF_EC2_WORKSPACE }}"
                }
            }
        }
        EOF

    - name: Initialize Terraform
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      if: github.event_name == 'push' && contains(github.event.head_commit.message, 'deploy')
      run: terraform validate -no-color

    - name: Terraform Plan
      if: github.event_name == 'push' && contains(github.event.head_commit.message, 'deploy')
      run: terraform plan
    
    - name: Deploy Infrastructure
      if: github.event_name == 'push' && contains(github.event.head_commit.message, 'deploy')
      run: terraform apply -auto-approve

    # - name: Get Public IP
    #   id: get-public-ip
    #   run: |
    #     PUBLIC_IP=$(terraform output public_ip)
    #     echo "Public IP: $PUBLIC_IP"
    #     echo "::set-output name=public_ip::$PUBLIC_IP"

    - name: Get Public IP
      id: get-public-ip
      run: |
        # Configure Terraform CLI to use Terraform Cloud
        terraform login

        # Retrieve the public IP from Terraform Cloud output
        PUBLIC_IP=$(terraform show -json | jq -r '.values.outputs.public_ip.value')
        echo "Public IP: $PUBLIC_IP"

        # Set GitHub Actions output variable
        echo "::set-output name=public_ip::$PUBLIC_IP"
    
    - name: Terraform Destroy
      if: github.event_name == 'push' && contains(github.event.head_commit.message, 'destroy')
      run: terraform destroy -auto-approve
  
  ssh_into_ec2:
      runs-on: ubuntu-latest
      needs: infra
      steps:
        - name: Use Public IP in Next Job
          run: |
            PUBLIC_IP=${{ needs.get-public-ip.output.pub_ip }}
            echo "Using Public IP: $PUBLIC_IP"
        # - name: Get Public IP
        #   id: get_public_ip
        #   run: echo "::set-output name=public_ip::$(terraform output public_ip)"
        #   #working-directory: infra22
       
  
        - name: SSH into EC2 Instance
          if: github.event_name == 'push' && contains(github.event.head_commit.message, 'ssh')
          run: |
            PRIVATE_KEY="${{ secrets.PRIVATE_KEY_SECRET }}"
            echo "$PRIVATE_KEY" > private_key.pem
            chmod 600 private_key.pem
            ssh -i private_key.pem ec2-user@${{ needs.terraform.outputs.PUBLIC_IP }} "echo Hello from SSH"
          # env:
          #   PRIVATE_KEY_SECRET: ${{ secrets.PRIVATE_KEY_SECRET }}